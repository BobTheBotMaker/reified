
(function(load){
  module.exports = load(require('path').resolve(__dirname, 'harmony-reflect/reflect.js'), true);
})(function(){

  try { var vm = require('vm'), fs = require('fs'), path = require('path') }
  catch (e) { return /*TODO other platforms*/ }

  var exists = fs.existsSync || path.existsSync;
  var resolve = function(file){
    var resolved = path.resolve(file);
    if ('_makeLong' in path) resolved = path._makeLong(resolved);
    return exists(resolved) ? resolved : null;
  }

  var scriptCache = {};

  return module.exports = function load(file, context, dontShimConfigurability){
    var resolved = resolve(file)
    if (!resolved) throw new Error('Path not found: ' + file);

    if (!(resolved in scriptCache)) {
      // syntax errors will happen here
      scriptCache[resolved] = vm.createScript(fs.readFileSync(file));
    }

    var script = scriptCache[resolved], ret;

    if (!context) {
      context = global;
      script.runInThisContext(file);
    }

    if (context === true) {
      context = vm.createContext();
    }

    if (context && context.constructor === process.binding('evals').Context) {
      script.runInContext(context);
    }

    if (dontShimConfigurability === true) return ret;


    // #################################################################
    // ### V8 Shim to handle non-configurable descriptors on Proxies ###
    // #################################################################

    context.Reflect.Proxy = (function(Proxy, context){
      // map proxies to their targets
      var proxies = new WeakMap;

      // shim the Proxy shim to intercept proxy creation so we can map proxies
      // to their target objects
      var ShimmedProxy = function(target, handler){
        return proxies.set(target, Proxy(target, handler));
      }

      // Intercept GOPD calls to check if the target is a proxy and get the proxy's target.
      // If it is a proxy falsify the return descriptor so that it's always configurable. This
      // preempts the issues that arise in V8 without having to directly modify the shim itself.
      context.Object.getOwnPropertyDescriptor = function(gopd){

        return function getOwnPropertyDescriptor(obj, prop){
          var desc = gopd.call(this, obj, prop);
          if (desc && proxies.has(obj)) {
            desc.configurable = true;
          }
          return desc;
        }

      }(context.Object.getOwnPropertyDescriptor);

      ShimmedProxy.create = context.Proxy.create;
      ShimmedProxy.createFunction = context.Proxy.createFunction;
      // Proxy is enumerable in V8 for some reason, and the shim doesn't bother to make
      // Reflect non-enumerable either.
      Object.defineProperties(context, {
        Proxy:         { value: ShimmedProxy, enumerable: false, configurable: true, writable: true },
        Reflect:       { enumerable: false },
        StopIteration: { enumerable: false },
      });


      // refresh context to ensure it's in sync
      if (context !== global) vm.runInContext('this', context);

      return ShimmedProxy;

    })(context.Reflect.Proxy, context);


    return context.Reflect;
  }
}());
